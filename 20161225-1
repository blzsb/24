#include<stdio.h>
#define precision 1e-6

double a[5];
int count=0;
double result=24;


double func(int n,double result);
double fabs(double x);
void func2(int u,int v,int w,int y);
void func3(int u,int v,int w,int y);

int main(){
    scanf("%lf %lf %lf %lf",&a[1],&a[2],&a[3],&a[4]);
    while(a[1]!=0||a[2]!=0||a[3]!=0||a[4]!=0){
        count=0;
        func(4,result);
        func2(1,2,3,4);
        func2(1,2,4,3);
        func2(1,3,2,4);
        func2(1,3,4,2);
        func2(1,4,2,3);
        func2(1,4,3,2);
        func2(2,1,3,4);
        func2(2,1,4,3);
        func2(2,3,1,4);
        func2(2,3,4,1);
        func2(2,4,1,3);
        func2(2,4,3,1);
        func2(3,1,2,4);
        func2(3,1,4,2);
        func2(3,2,1,4);
        func2(3,2,4,1);
        func2(3,4,1,2);
        func2(3,4,2,1);
        func2(4,1,2,3);
        func2(4,1,3,2);
        func2(4,2,1,3);
        func2(4,2,3,1);
        func2(4,3,1,2);
        func2(4,3,2,1);


        func3(1,2,3,4);
        func3(1,2,4,3);
        func3(1,3,2,4);
        func3(1,3,4,2);
        func3(1,4,2,3);
        func3(1,4,3,2);
        func3(2,1,3,4);
        func3(2,1,4,3);
        func3(2,3,1,4);
        func3(2,3,4,1);
        func3(2,4,1,3);
        func3(2,4,3,1);
        func3(3,1,2,4);
        func3(3,1,4,2);
        func3(3,2,1,4);
        func3(3,2,4,1);
        func3(3,4,1,2);
        func3(3,4,2,1);
        func3(4,1,2,3);
        func3(4,1,3,2);
        func3(4,2,1,3);
        func3(4,2,3,1);
        func3(4,3,1,2);
        func3(4,3,2,1);

        if(count>0){
            printf("YES\n");
        }
        else{
            printf("NO\n");
        }
        scanf("%lf %lf %lf %lf",&a[1],&a[2],&a[3],&a[4]);
    }
}

double func(int n,double result){
    double b[5];
    double x[10]={0};
    int i;
    if(n==2){
        x[0]=a[1]+a[2];
        x[1]=a[1]-a[2];
        x[2]=a[2]-a[1];
        x[3]=a[1]*a[2];
        if(a[2]!=0){
            x[4]=a[1]/a[2];
        }
        if(a[1]!=0){
            x[5]=a[2]/a[1];
        }
        for(i=0;i<6;i++){
            if(fabs(x[i]-result)<precision){
                count++;
                return x[i];
            }
        }
        return 0;
    }
    else{
        for(i=1;i<=n;i++){
            b[i]=a[i];
        }
        for(i=1;i<=n;i++){
            a[i]=a[n];
            func(n-1,b[i]+result);
            a[i]=b[i];
        }
        for(i=1;i<=n;i++){
            a[i]=a[n];
            func(n-1,b[i]*result);
            a[i]=b[i];
        }
        for(i=1;i<=n;i++){
            a[i]=a[n];
            func(n-1,b[i]-result);
            a[i]=b[i];
        }
        for(i=1;i<=n;i++){
            a[i]=a[n];
            func(n-1,result-b[i]);
            a[i]=b[i];
        }
        for(i=1;i<=n;i++){
            if(a[n]!=0){
                a[i]=a[n];
                func(n-1,result/b[i]);
                a[i]=b[i];
            }
        }
        for(i=1;i<=n;i++){
            if(result!=0){
                a[i]=a[n];
                func(n-1,b[i]/result);
                a[i]=b[i];
            }
        }

    }
    return 0;
}



void func2(int u,int v,int w,int y){
    double x[30]={0};
    int i;
    double p,q,m,n;
    p=a[u];q=a[v];m=a[w];n=a[y];
    x[0]=(p+q)*(m+n);
    x[1]=(p+q)*(m-n);
    x[2]=(p+q)*(n-m);
    x[3]=(p-q)*(m+n);
    x[4]=(p-q)*(m-n);
    x[5]=(p-q)*(n-m);
    x[6]=(q-p)*(m+n);
    x[7]=(q-p)*(m-n);
    x[8]=(q-p)*(n-m);

    x[9]=(p+q)/(m+n);
    x[10]=(p-q)/(m+n);
    x[11]=(q-p)/(m+n);
    if(m!=n){
        x[12]=(p+q)/(m-n);
        x[13]=(p-q)/(m-n);
        x[14]=(q-p)/(m-n);
        x[15]=(p+q)/(n-m);
        x[16]=(p-q)/(n-m);
        x[17]=(q-p)/(n-m);
    }
    x[18]=(m+n)/(p+q);
    x[19]=(m-n)/(p+q);
    x[20]=(n-m)/(p+q);
    if(p!=q){
        x[21]=(m+n)/(p-q);
        x[22]=(m-n)/(p-q);
        x[23]=(m-n)/(p-q);
        x[24]=(m+n)/(q-p);
        x[25]=(m-n)/(q-p);
        x[26]=(n-m)/(q-p);
    }

    for(i=0;i<27;i++){
        if(fabs(x[i]-24)<precision){
            count++;
        }
    }
}

void func3(int u,int v,int w,int y){
    double x[30]={0};
    int i;
    double p,q,m,n;
    p=a[u];q=a[v];m=a[w];n=a[y];
    x[0]=p*q+m*n;
    x[1]=p*q+m/n;
    x[2]=p*q+n/m;
    x[3]=p*q-m*n;
    x[4]=p*q-m/n;
    x[5]=p*q-n/m;
    x[6]=m*n-p*q;
    x[7]=m/n-p*q;
    x[8]=n/m-p*q;
    x[9]=p/q+m*n;
    x[10]=p/q+m/n;
    x[11]=p/q+n/m;
    x[12]=p/q-m*n;
    x[13]=p/q-m/n;
    x[14]=p/q-n/m;
    x[15]=m*n-p/q;
    x[16]=m/n-p/q;
    x[17]=n/m-p/q;
    x[18]=q/p+m*n;
    x[19]=q/p+m/n;
    x[20]=q/p+n/m;
    x[21]=q/p-m*n;
    x[22]=q/p-m/n;
    x[23]=q/p-n/m;
    x[24]=m*n-q/p;
    x[25]=m/n-q/p;
    x[26]=n/m-q/p;


    for(i=0;i<27;i++){
        if(fabs(x[i]-24)<precision){
            count++;
        }
    }
}


double fabs(double x){
    if(x<0){
        x=0-x;
    }
    return x;
}


